name: Build and Deploy

on:
  push:
    branches:
      - main  # Trigger only on pushes to the main branch

jobs:
  deploy_nginx:
    name: Deploy Nginx
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Create nginx config folder
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Créer le dossier models s'il n'existe pas
            sudo mkdir -p /var/www/pyto_project/nginx
            # Donner les bonnes permissions
            sudo chown -R ${{ vars.SSH_USER }}:${{ vars.SSH_USER }} /var/www/pyto_project/nginx
            sudo chmod -R 755 /var/www/pyto_project/nginx
      - name: Copy nginx config to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ./api.pyto.eu.conf
          target: /var/www/pyto_project/nginx

  deploy_models:
    name: Deploy AI Models
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Check for changes in models
        id: check_changes
        run: |
          CHANGED=$(git diff --name-only HEAD^ HEAD | grep ^models/ || true)
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT

      - name: Copy AI models to server
        if: steps.check_changes.outputs.changed != ''
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Créer le dossier models s'il n'existe pas
            sudo mkdir -p /var/www/pyto_project/models
            # Donner les bonnes permissions
            sudo chown -R ${{ vars.SSH_USER }}:${{ vars.SSH_USER }} /var/www/pyto_project/models
            sudo chmod -R 755 /var/www/pyto_project/models
      - name: Copy models files
        if: steps.check_changes.outputs.changed != ''
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "models/*"
          target: /var/www/pyto_project/models
          strip_components: 1

  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository with full history for comparison
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      # Log in to DockerHub if changes detected
      - name: Log in to DockerHub
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
        env:
          DOCKER_USER: ${{ vars.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      # Build and tag Docker image if changes detected
      - name: Build Docker image
        run: docker build -t fastapi .

      - name: Tag Docker image
        run: docker tag fastapi pytocompany/fastapi:latest

      # Push Docker image to registry if changes detected
      - name: Push Docker image to DockerHub
        run: docker push pytocompany/fastapi:latest

  deploy:
    name: Deploy on AlmaLinux Server
    needs: [build_and_push]
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Copy docker-compose.yml to the server
      - name: Copy docker-compose.yml to the server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ./docker-compose.yml
          target: /var/www/pyto_project

      # SSH into the server and deploy
      - name: SSH into server and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/pyto_project &&
            docker system prune -a --volumes -f &&
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ vars.DOCKER_USER }} --password-stdin &&
            export DATABASE_USER="${{ vars.DATABASE_USER }}" &&
            export DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" &&
            export DATABASE_NAME="${{ vars.DATABASE_NAME }}" &&
            export DATABASE_HOST="${{ vars.DATABASE_HOST }}" &&
            export DATABASE_PORT="${{ vars.DATABASE_PORT }}" &&
            export GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}" &&
            export FIREBASE_PRIVATE_KEY_ID="${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" &&
            export FIREBASE_PRIVATE_KEY="${{ secrets.FIREBASE_PRIVATE_KEY }}" &&
            export FIREBASE_CLIENT_EMAIL="${{ vars.FIREBASE_CLIENT_EMAIL }}" &&
            export FIREBASE_CLIENT_ID="${{ vars.FIREBASE_CLIENT_ID }}" &&
            export FIREBASE_PROJECT_ID="${{ vars.FIREBASE_PROJECT_ID }}" &&
            export MISTRAL_AI_API_KEY="${{ secrets.MISTRAL_AI_API_KEY }}" &&
            export OPEN_WEATHER_API_KEY="${{ secrets.OPEN_WEATHER_API_KEY }}" &&
            export PATH_TO_MODELS="${{ vars.PATH_TO_MODELS }}" &&
            export PATH_TO_LOGS="${{ vars.PATH_TO_LOGS }}" &&
            echo 'starting down' &&
            timeout 500 docker-compose down &&
            echo 'starting pull' &&
            timeout 500 docker-compose pull &&
            echo 'starting up' &&
            timeout 500 docker-compose up -d &&
            rm docker-compose.yml